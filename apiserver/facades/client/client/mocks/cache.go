// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/client (interfaces: ModelCache,ModelCacheBranch)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/juju/juju/apiserver/facades/client/client"
	reflect "reflect"
)

// MockModelCache is a mock of ModelCache interface
type MockModelCache struct {
	ctrl     *gomock.Controller
	recorder *MockModelCacheMockRecorder
}

// MockModelCacheMockRecorder is the mock recorder for MockModelCache
type MockModelCacheMockRecorder struct {
	mock *MockModelCache
}

// NewMockModelCache creates a new mock instance
func NewMockModelCache(ctrl *gomock.Controller) *MockModelCache {
	mock := &MockModelCache{ctrl: ctrl}
	mock.recorder = &MockModelCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelCache) EXPECT() *MockModelCacheMockRecorder {
	return m.recorder
}

// Branches mocks base method
func (m *MockModelCache) Branches() ([]client.ModelCacheBranch, error) {
	ret := m.ctrl.Call(m, "Branches")
	ret0, _ := ret[0].([]client.ModelCacheBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Branches indicates an expected call of Branches
func (mr *MockModelCacheMockRecorder) Branches() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branches", reflect.TypeOf((*MockModelCache)(nil).Branches))
}

// MockModelCacheBranch is a mock of ModelCacheBranch interface
type MockModelCacheBranch struct {
	ctrl     *gomock.Controller
	recorder *MockModelCacheBranchMockRecorder
}

// MockModelCacheBranchMockRecorder is the mock recorder for MockModelCacheBranch
type MockModelCacheBranchMockRecorder struct {
	mock *MockModelCacheBranch
}

// NewMockModelCacheBranch creates a new mock instance
func NewMockModelCacheBranch(ctrl *gomock.Controller) *MockModelCacheBranch {
	mock := &MockModelCacheBranch{ctrl: ctrl}
	mock.recorder = &MockModelCacheBranchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelCacheBranch) EXPECT() *MockModelCacheBranchMockRecorder {
	return m.recorder
}

// AssignedUnits mocks base method
func (m *MockModelCacheBranch) AssignedUnits() map[string][]string {
	ret := m.ctrl.Call(m, "AssignedUnits")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// AssignedUnits indicates an expected call of AssignedUnits
func (mr *MockModelCacheBranchMockRecorder) AssignedUnits() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedUnits", reflect.TypeOf((*MockModelCacheBranch)(nil).AssignedUnits))
}

// Created mocks base method
func (m *MockModelCacheBranch) Created() int64 {
	ret := m.ctrl.Call(m, "Created")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Created indicates an expected call of Created
func (mr *MockModelCacheBranchMockRecorder) Created() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockModelCacheBranch)(nil).Created))
}

// Name mocks base method
func (m *MockModelCacheBranch) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockModelCacheBranchMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModelCacheBranch)(nil).Name))
}
