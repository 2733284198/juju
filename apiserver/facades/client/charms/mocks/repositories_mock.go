// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/charms (interfaces: CSRepository,CharmHubClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v8"
	params "github.com/juju/charmrepo/v6/csclient/params"
	charmhub "github.com/juju/juju/charmhub"
	transport "github.com/juju/juju/charmhub/transport"
	reflect "reflect"
)

// MockCSRepository is a mock of CSRepository interface
type MockCSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCSRepositoryMockRecorder
}

// MockCSRepositoryMockRecorder is the mock recorder for MockCSRepository
type MockCSRepositoryMockRecorder struct {
	mock *MockCSRepository
}

// NewMockCSRepository creates a new mock instance
func NewMockCSRepository(ctrl *gomock.Controller) *MockCSRepository {
	mock := &MockCSRepository{ctrl: ctrl}
	mock.recorder = &MockCSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSRepository) EXPECT() *MockCSRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCSRepository) Get(arg0 *charm.URL, arg1 string) (*charm.CharmArchive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*charm.CharmArchive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCSRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCSRepository)(nil).Get), arg0, arg1)
}

// ResolveWithPreferredChannel mocks base method
func (m *MockCSRepository) ResolveWithPreferredChannel(arg0 *charm.URL, arg1 params.Channel) (*charm.URL, params.Channel, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveWithPreferredChannel", arg0, arg1)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(params.Channel)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ResolveWithPreferredChannel indicates an expected call of ResolveWithPreferredChannel
func (mr *MockCSRepositoryMockRecorder) ResolveWithPreferredChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveWithPreferredChannel", reflect.TypeOf((*MockCSRepository)(nil).ResolveWithPreferredChannel), arg0, arg1)
}

// MockCharmHubClient is a mock of CharmHubClient interface
type MockCharmHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmHubClientMockRecorder
}

// MockCharmHubClientMockRecorder is the mock recorder for MockCharmHubClient
type MockCharmHubClientMockRecorder struct {
	mock *MockCharmHubClient
}

// NewMockCharmHubClient creates a new mock instance
func NewMockCharmHubClient(ctrl *gomock.Controller) *MockCharmHubClient {
	mock := &MockCharmHubClient{ctrl: ctrl}
	mock.recorder = &MockCharmHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCharmHubClient) EXPECT() *MockCharmHubClientMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockCharmHubClient) Info(arg0 context.Context, arg1 string) (transport.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(transport.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockCharmHubClientMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCharmHubClient)(nil).Info), arg0, arg1)
}

// Refresh mocks base method
func (m *MockCharmHubClient) Refresh(arg0 context.Context, arg1 charmhub.RefreshConfig) ([]transport.RefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].([]transport.RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh
func (mr *MockCharmHubClientMockRecorder) Refresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockCharmHubClient)(nil).Refresh), arg0, arg1)
}
