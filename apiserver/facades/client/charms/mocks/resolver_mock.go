// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/charms (interfaces: CSURLResolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v8"
	params "github.com/juju/charmrepo/v6/csclient/params"
	reflect "reflect"
)

// MockCSURLResolver is a mock of CSURLResolver interface
type MockCSURLResolver struct {
	ctrl     *gomock.Controller
	recorder *MockCSURLResolverMockRecorder
}

// MockCSURLResolverMockRecorder is the mock recorder for MockCSURLResolver
type MockCSURLResolverMockRecorder struct {
	mock *MockCSURLResolver
}

// NewMockCSURLResolver creates a new mock instance
func NewMockCSURLResolver(ctrl *gomock.Controller) *MockCSURLResolver {
	mock := &MockCSURLResolver{ctrl: ctrl}
	mock.recorder = &MockCSURLResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSURLResolver) EXPECT() *MockCSURLResolverMockRecorder {
	return m.recorder
}

// ResolveWithPreferredChannel mocks base method
func (m *MockCSURLResolver) ResolveWithPreferredChannel(arg0 *charm.URL, arg1 params.Channel) (*charm.URL, params.Channel, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveWithPreferredChannel", arg0, arg1)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(params.Channel)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ResolveWithPreferredChannel indicates an expected call of ResolveWithPreferredChannel
func (mr *MockCSURLResolverMockRecorder) ResolveWithPreferredChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveWithPreferredChannel", reflect.TypeOf((*MockCSURLResolver)(nil).ResolveWithPreferredChannel), arg0, arg1)
}
