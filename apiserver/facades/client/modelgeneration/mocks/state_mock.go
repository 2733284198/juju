// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelgeneration (interfaces: ModelGenerationState)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	modelgeneration "github.com/juju/juju/apiserver/facades/client/modelgeneration"
	names_v2 "gopkg.in/juju/names.v2"
	reflect "reflect"
)

// MockModelGenerationState is a mock of ModelGenerationState interface
type MockModelGenerationState struct {
	ctrl     *gomock.Controller
	recorder *MockModelGenerationStateMockRecorder
}

// MockModelGenerationStateMockRecorder is the mock recorder for MockModelGenerationState
type MockModelGenerationStateMockRecorder struct {
	mock *MockModelGenerationState
}

// NewMockModelGenerationState creates a new mock instance
func NewMockModelGenerationState(ctrl *gomock.Controller) *MockModelGenerationState {
	mock := &MockModelGenerationState{ctrl: ctrl}
	mock.recorder = &MockModelGenerationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelGenerationState) EXPECT() *MockModelGenerationStateMockRecorder {
	return m.recorder
}

// ControllerTag mocks base method
func (m *MockModelGenerationState) ControllerTag() names_v2.ControllerTag {
	ret := m.ctrl.Call(m, "ControllerTag")
	ret0, _ := ret[0].(names_v2.ControllerTag)
	return ret0
}

// ControllerTag indicates an expected call of ControllerTag
func (mr *MockModelGenerationStateMockRecorder) ControllerTag() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTag", reflect.TypeOf((*MockModelGenerationState)(nil).ControllerTag))
}

// Model mocks base method
func (m *MockModelGenerationState) Model() (modelgeneration.GenerationModel, error) {
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(modelgeneration.GenerationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model
func (mr *MockModelGenerationStateMockRecorder) Model() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelGenerationState)(nil).Model))
}
