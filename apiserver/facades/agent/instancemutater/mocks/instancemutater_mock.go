// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/instancemutater (interfaces: InstanceMutaterState,Machine,LXDProfile)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	status "github.com/juju/juju/core/status"
	state "github.com/juju/juju/state"
	names_v3 "gopkg.in/juju/names.v3"
	reflect "reflect"
	time "time"
)

// MockInstanceMutaterState is a mock of InstanceMutaterState interface
type MockInstanceMutaterState struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMutaterStateMockRecorder
}

// MockInstanceMutaterStateMockRecorder is the mock recorder for MockInstanceMutaterState
type MockInstanceMutaterStateMockRecorder struct {
	mock *MockInstanceMutaterState
}

// NewMockInstanceMutaterState creates a new mock instance
func NewMockInstanceMutaterState(ctrl *gomock.Controller) *MockInstanceMutaterState {
	mock := &MockInstanceMutaterState{ctrl: ctrl}
	mock.recorder = &MockInstanceMutaterStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceMutaterState) EXPECT() *MockInstanceMutaterStateMockRecorder {
	return m.recorder
}

// ControllerTimestamp mocks base method
func (m *MockInstanceMutaterState) ControllerTimestamp() (*time.Time, error) {
	ret := m.ctrl.Call(m, "ControllerTimestamp")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerTimestamp indicates an expected call of ControllerTimestamp
func (mr *MockInstanceMutaterStateMockRecorder) ControllerTimestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTimestamp", reflect.TypeOf((*MockInstanceMutaterState)(nil).ControllerTimestamp))
}

// FindEntity mocks base method
func (m *MockInstanceMutaterState) FindEntity(arg0 names_v3.Tag) (state.Entity, error) {
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity
func (mr *MockInstanceMutaterStateMockRecorder) FindEntity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockInstanceMutaterState)(nil).FindEntity), arg0)
}

// MockMachine is a mock of Machine interface
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// SetCharmProfiles mocks base method
func (m *MockMachine) SetCharmProfiles(arg0 []string) error {
	ret := m.ctrl.Call(m, "SetCharmProfiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmProfiles indicates an expected call of SetCharmProfiles
func (mr *MockMachineMockRecorder) SetCharmProfiles(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmProfiles", reflect.TypeOf((*MockMachine)(nil).SetCharmProfiles), arg0)
}

// SetModificationStatus mocks base method
func (m *MockMachine) SetModificationStatus(arg0 status.StatusInfo) error {
	ret := m.ctrl.Call(m, "SetModificationStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModificationStatus indicates an expected call of SetModificationStatus
func (mr *MockMachineMockRecorder) SetModificationStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModificationStatus", reflect.TypeOf((*MockMachine)(nil).SetModificationStatus), arg0)
}

// MockLXDProfile is a mock of LXDProfile interface
type MockLXDProfile struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileMockRecorder
}

// MockLXDProfileMockRecorder is the mock recorder for MockLXDProfile
type MockLXDProfileMockRecorder struct {
	mock *MockLXDProfile
}

// NewMockLXDProfile creates a new mock instance
func NewMockLXDProfile(ctrl *gomock.Controller) *MockLXDProfile {
	mock := &MockLXDProfile{ctrl: ctrl}
	mock.recorder = &MockLXDProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfile) EXPECT() *MockLXDProfileMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockLXDProfile) Config() map[string]string {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockLXDProfileMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockLXDProfile)(nil).Config))
}

// Description mocks base method
func (m *MockLXDProfile) Description() string {
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description
func (mr *MockLXDProfileMockRecorder) Description() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockLXDProfile)(nil).Description))
}

// Devices mocks base method
func (m *MockLXDProfile) Devices() map[string]map[string]string {
	ret := m.ctrl.Call(m, "Devices")
	ret0, _ := ret[0].(map[string]map[string]string)
	return ret0
}

// Devices indicates an expected call of Devices
func (mr *MockLXDProfileMockRecorder) Devices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockLXDProfile)(nil).Devices))
}

// Empty mocks base method
func (m *MockLXDProfile) Empty() bool {
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockLXDProfileMockRecorder) Empty() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockLXDProfile)(nil).Empty))
}

// ValidateConfigDevices mocks base method
func (m *MockLXDProfile) ValidateConfigDevices() error {
	ret := m.ctrl.Call(m, "ValidateConfigDevices")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfigDevices indicates an expected call of ValidateConfigDevices
func (mr *MockLXDProfileMockRecorder) ValidateConfigDevices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfigDevices", reflect.TypeOf((*MockLXDProfile)(nil).ValidateConfigDevices))
}
