// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/instancemutater (interfaces: InstanceMutaterState)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	instancemutater "github.com/juju/juju/apiserver/facades/agent/instancemutater"
	state "github.com/juju/juju/state"
	names_v2 "gopkg.in/juju/names.v2"
	reflect "reflect"
)

// MockInstanceMutaterState is a mock of InstanceMutaterState interface
type MockInstanceMutaterState struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMutaterStateMockRecorder
}

// MockInstanceMutaterStateMockRecorder is the mock recorder for MockInstanceMutaterState
type MockInstanceMutaterStateMockRecorder struct {
	mock *MockInstanceMutaterState
}

// NewMockInstanceMutaterState creates a new mock instance
func NewMockInstanceMutaterState(ctrl *gomock.Controller) *MockInstanceMutaterState {
	mock := &MockInstanceMutaterState{ctrl: ctrl}
	mock.recorder = &MockInstanceMutaterStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceMutaterState) EXPECT() *MockInstanceMutaterStateMockRecorder {
	return m.recorder
}

// FindEntity mocks base method
func (m *MockInstanceMutaterState) FindEntity(arg0 names_v2.Tag) (state.Entity, error) {
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity
func (mr *MockInstanceMutaterStateMockRecorder) FindEntity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockInstanceMutaterState)(nil).FindEntity), arg0)
}

// Model mocks base method
func (m *MockInstanceMutaterState) Model() (instancemutater.Model, error) {
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(instancemutater.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model
func (mr *MockInstanceMutaterStateMockRecorder) Model() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockInstanceMutaterState)(nil).Model))
}

// Unit mocks base method
func (m *MockInstanceMutaterState) Unit(arg0 string) (instancemutater.Unit, error) {
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(instancemutater.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit
func (mr *MockInstanceMutaterStateMockRecorder) Unit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockInstanceMutaterState)(nil).Unit), arg0)
}

// WatchModelMachines mocks base method
func (m *MockInstanceMutaterState) WatchModelMachines() state.StringsWatcher {
	ret := m.ctrl.Call(m, "WatchModelMachines")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelMachines indicates an expected call of WatchModelMachines
func (mr *MockInstanceMutaterStateMockRecorder) WatchModelMachines() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelMachines", reflect.TypeOf((*MockInstanceMutaterState)(nil).WatchModelMachines))
}
