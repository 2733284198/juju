// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/instancepoller (interfaces: StateLinkLayerDevice,StateLinkLayerDeviceAddress)

// Package instancepoller is a generated GoMock package.
package instancepoller

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/juju/juju/core/network"
	txn "gopkg.in/mgo.v2/txn"
	reflect "reflect"
)

// MockStateLinkLayerDevice is a mock of StateLinkLayerDevice interface
type MockStateLinkLayerDevice struct {
	ctrl     *gomock.Controller
	recorder *MockStateLinkLayerDeviceMockRecorder
}

// MockStateLinkLayerDeviceMockRecorder is the mock recorder for MockStateLinkLayerDevice
type MockStateLinkLayerDeviceMockRecorder struct {
	mock *MockStateLinkLayerDevice
}

// NewMockStateLinkLayerDevice creates a new mock instance
func NewMockStateLinkLayerDevice(ctrl *gomock.Controller) *MockStateLinkLayerDevice {
	mock := &MockStateLinkLayerDevice{ctrl: ctrl}
	mock.recorder = &MockStateLinkLayerDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateLinkLayerDevice) EXPECT() *MockStateLinkLayerDeviceMockRecorder {
	return m.recorder
}

// IsAutoStart mocks base method
func (m *MockStateLinkLayerDevice) IsAutoStart() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoStart")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoStart indicates an expected call of IsAutoStart
func (mr *MockStateLinkLayerDeviceMockRecorder) IsAutoStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoStart", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).IsAutoStart))
}

// IsLoopbackDevice mocks base method
func (m *MockStateLinkLayerDevice) IsLoopbackDevice() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoopbackDevice")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoopbackDevice indicates an expected call of IsLoopbackDevice
func (mr *MockStateLinkLayerDeviceMockRecorder) IsLoopbackDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoopbackDevice", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).IsLoopbackDevice))
}

// IsUp mocks base method
func (m *MockStateLinkLayerDevice) IsUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUp indicates an expected call of IsUp
func (mr *MockStateLinkLayerDeviceMockRecorder) IsUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUp", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).IsUp))
}

// MACAddress mocks base method
func (m *MockStateLinkLayerDevice) MACAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MACAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// MACAddress indicates an expected call of MACAddress
func (mr *MockStateLinkLayerDeviceMockRecorder) MACAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MACAddress", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).MACAddress))
}

// MTU mocks base method
func (m *MockStateLinkLayerDevice) MTU() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MTU")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MTU indicates an expected call of MTU
func (mr *MockStateLinkLayerDeviceMockRecorder) MTU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MTU", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).MTU))
}

// Name mocks base method
func (m *MockStateLinkLayerDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockStateLinkLayerDeviceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).Name))
}

// ParentName mocks base method
func (m *MockStateLinkLayerDevice) ParentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ParentName indicates an expected call of ParentName
func (mr *MockStateLinkLayerDeviceMockRecorder) ParentName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentName", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).ParentName))
}

// ProviderID mocks base method
func (m *MockStateLinkLayerDevice) ProviderID() network.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderID")
	ret0, _ := ret[0].(network.Id)
	return ret0
}

// ProviderID indicates an expected call of ProviderID
func (mr *MockStateLinkLayerDeviceMockRecorder) ProviderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderID", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).ProviderID))
}

// SetProviderIDOps mocks base method
func (m *MockStateLinkLayerDevice) SetProviderIDOps(arg0 network.Id) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderIDOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProviderIDOps indicates an expected call of SetProviderIDOps
func (mr *MockStateLinkLayerDeviceMockRecorder) SetProviderIDOps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderIDOps", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).SetProviderIDOps), arg0)
}

// Type mocks base method
func (m *MockStateLinkLayerDevice) Type() network.LinkLayerDeviceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(network.LinkLayerDeviceType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockStateLinkLayerDeviceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockStateLinkLayerDevice)(nil).Type))
}

// MockStateLinkLayerDeviceAddress is a mock of StateLinkLayerDeviceAddress interface
type MockStateLinkLayerDeviceAddress struct {
	ctrl     *gomock.Controller
	recorder *MockStateLinkLayerDeviceAddressMockRecorder
}

// MockStateLinkLayerDeviceAddressMockRecorder is the mock recorder for MockStateLinkLayerDeviceAddress
type MockStateLinkLayerDeviceAddressMockRecorder struct {
	mock *MockStateLinkLayerDeviceAddress
}

// NewMockStateLinkLayerDeviceAddress creates a new mock instance
func NewMockStateLinkLayerDeviceAddress(ctrl *gomock.Controller) *MockStateLinkLayerDeviceAddress {
	mock := &MockStateLinkLayerDeviceAddress{ctrl: ctrl}
	mock.recorder = &MockStateLinkLayerDeviceAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateLinkLayerDeviceAddress) EXPECT() *MockStateLinkLayerDeviceAddressMockRecorder {
	return m.recorder
}

// ConfigMethod mocks base method
func (m *MockStateLinkLayerDeviceAddress) ConfigMethod() network.AddressConfigMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMethod")
	ret0, _ := ret[0].(network.AddressConfigMethod)
	return ret0
}

// ConfigMethod indicates an expected call of ConfigMethod
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) ConfigMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMethod", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).ConfigMethod))
}

// DNSSearchDomains mocks base method
func (m *MockStateLinkLayerDeviceAddress) DNSSearchDomains() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSSearchDomains")
	ret0, _ := ret[0].([]string)
	return ret0
}

// DNSSearchDomains indicates an expected call of DNSSearchDomains
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) DNSSearchDomains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSSearchDomains", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).DNSSearchDomains))
}

// DNSServers mocks base method
func (m *MockStateLinkLayerDeviceAddress) DNSServers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSServers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// DNSServers indicates an expected call of DNSServers
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) DNSServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSServers", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).DNSServers))
}

// DeviceName mocks base method
func (m *MockStateLinkLayerDeviceAddress) DeviceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DeviceName indicates an expected call of DeviceName
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) DeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceName", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).DeviceName))
}

// GatewayAddress mocks base method
func (m *MockStateLinkLayerDeviceAddress) GatewayAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GatewayAddress indicates an expected call of GatewayAddress
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) GatewayAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayAddress", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).GatewayAddress))
}

// IsDefaultGateway mocks base method
func (m *MockStateLinkLayerDeviceAddress) IsDefaultGateway() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDefaultGateway")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDefaultGateway indicates an expected call of IsDefaultGateway
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) IsDefaultGateway() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDefaultGateway", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).IsDefaultGateway))
}

// Origin mocks base method
func (m *MockStateLinkLayerDeviceAddress) Origin() network.Origin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origin")
	ret0, _ := ret[0].(network.Origin)
	return ret0
}

// Origin indicates an expected call of Origin
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) Origin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origin", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).Origin))
}

// SetOriginOps mocks base method
func (m *MockStateLinkLayerDeviceAddress) SetOriginOps(arg0 network.Origin) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOriginOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// SetOriginOps indicates an expected call of SetOriginOps
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) SetOriginOps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOriginOps", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).SetOriginOps), arg0)
}

// SetProviderIDOps mocks base method
func (m *MockStateLinkLayerDeviceAddress) SetProviderIDOps(arg0 network.Id) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderIDOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProviderIDOps indicates an expected call of SetProviderIDOps
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) SetProviderIDOps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderIDOps", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).SetProviderIDOps), arg0)
}

// SetProviderNetIDsOps mocks base method
func (m *MockStateLinkLayerDeviceAddress) SetProviderNetIDsOps(arg0, arg1 network.Id) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderNetIDsOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// SetProviderNetIDsOps indicates an expected call of SetProviderNetIDsOps
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) SetProviderNetIDsOps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderNetIDsOps", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).SetProviderNetIDsOps), arg0, arg1)
}

// SubnetCIDR mocks base method
func (m *MockStateLinkLayerDeviceAddress) SubnetCIDR() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetCIDR")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetCIDR indicates an expected call of SubnetCIDR
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) SubnetCIDR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetCIDR", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).SubnetCIDR))
}

// Value mocks base method
func (m *MockStateLinkLayerDeviceAddress) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockStateLinkLayerDeviceAddressMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockStateLinkLayerDeviceAddress)(nil).Value))
}
