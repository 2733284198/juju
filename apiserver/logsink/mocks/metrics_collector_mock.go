// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/logsink (interfaces: MetricsCollector)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockMetricsCollector is a mock of MetricsCollector interface
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// Connections mocks base method
func (m *MockMetricsCollector) Connections() prometheus.Gauge {
	ret := m.ctrl.Call(m, "Connections")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// Connections indicates an expected call of Connections
func (mr *MockMetricsCollectorMockRecorder) Connections() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connections", reflect.TypeOf((*MockMetricsCollector)(nil).Connections))
}

// TotalConnections mocks base method
func (m *MockMetricsCollector) TotalConnections() prometheus.Counter {
	ret := m.ctrl.Call(m, "TotalConnections")
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// TotalConnections indicates an expected call of TotalConnections
func (mr *MockMetricsCollectorMockRecorder) TotalConnections() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalConnections", reflect.TypeOf((*MockMetricsCollector)(nil).TotalConnections))
}
