// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: LXDProfileUpgradeBackend,LXDProfileUpgradeMachine,LXDProfileUpgradeUnit)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/juju/juju/apiserver/common"
	model "github.com/juju/juju/core/model"
	state "github.com/juju/juju/state"
	names_v2 "gopkg.in/juju/names.v2"
	reflect "reflect"
)

// MockLXDProfileUpgradeBackend is a mock of LXDProfileUpgradeBackend interface
type MockLXDProfileUpgradeBackend struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileUpgradeBackendMockRecorder
}

// MockLXDProfileUpgradeBackendMockRecorder is the mock recorder for MockLXDProfileUpgradeBackend
type MockLXDProfileUpgradeBackendMockRecorder struct {
	mock *MockLXDProfileUpgradeBackend
}

// NewMockLXDProfileUpgradeBackend creates a new mock instance
func NewMockLXDProfileUpgradeBackend(ctrl *gomock.Controller) *MockLXDProfileUpgradeBackend {
	mock := &MockLXDProfileUpgradeBackend{ctrl: ctrl}
	mock.recorder = &MockLXDProfileUpgradeBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileUpgradeBackend) EXPECT() *MockLXDProfileUpgradeBackendMockRecorder {
	return m.recorder
}

// Machine mocks base method
func (m *MockLXDProfileUpgradeBackend) Machine(arg0 string) (common.LXDProfileUpgradeMachine, error) {
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(common.LXDProfileUpgradeMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine
func (mr *MockLXDProfileUpgradeBackendMockRecorder) Machine(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLXDProfileUpgradeBackend)(nil).Machine), arg0)
}

// Unit mocks base method
func (m *MockLXDProfileUpgradeBackend) Unit(arg0 string) (common.LXDProfileUpgradeUnit, error) {
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(common.LXDProfileUpgradeUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit
func (mr *MockLXDProfileUpgradeBackendMockRecorder) Unit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockLXDProfileUpgradeBackend)(nil).Unit), arg0)
}

// MockLXDProfileUpgradeMachine is a mock of LXDProfileUpgradeMachine interface
type MockLXDProfileUpgradeMachine struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileUpgradeMachineMockRecorder
}

// MockLXDProfileUpgradeMachineMockRecorder is the mock recorder for MockLXDProfileUpgradeMachine
type MockLXDProfileUpgradeMachineMockRecorder struct {
	mock *MockLXDProfileUpgradeMachine
}

// NewMockLXDProfileUpgradeMachine creates a new mock instance
func NewMockLXDProfileUpgradeMachine(ctrl *gomock.Controller) *MockLXDProfileUpgradeMachine {
	mock := &MockLXDProfileUpgradeMachine{ctrl: ctrl}
	mock.recorder = &MockLXDProfileUpgradeMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileUpgradeMachine) EXPECT() *MockLXDProfileUpgradeMachineMockRecorder {
	return m.recorder
}

// LXDProfileUpgradeStatus mocks base method
func (m *MockLXDProfileUpgradeMachine) LXDProfileUpgradeStatus() (model.LXDProfileUpgradeStatus, error) {
	ret := m.ctrl.Call(m, "LXDProfileUpgradeStatus")
	ret0, _ := ret[0].(model.LXDProfileUpgradeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileUpgradeStatus indicates an expected call of LXDProfileUpgradeStatus
func (mr *MockLXDProfileUpgradeMachineMockRecorder) LXDProfileUpgradeStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileUpgradeStatus", reflect.TypeOf((*MockLXDProfileUpgradeMachine)(nil).LXDProfileUpgradeStatus))
}

// WatchLXDProfileUpgradeNotifications mocks base method
func (m *MockLXDProfileUpgradeMachine) WatchLXDProfileUpgradeNotifications() (state.NotifyWatcher, error) {
	ret := m.ctrl.Call(m, "WatchLXDProfileUpgradeNotifications")
	ret0, _ := ret[0].(state.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLXDProfileUpgradeNotifications indicates an expected call of WatchLXDProfileUpgradeNotifications
func (mr *MockLXDProfileUpgradeMachineMockRecorder) WatchLXDProfileUpgradeNotifications() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLXDProfileUpgradeNotifications", reflect.TypeOf((*MockLXDProfileUpgradeMachine)(nil).WatchLXDProfileUpgradeNotifications))
}

// MockLXDProfileUpgradeUnit is a mock of LXDProfileUpgradeUnit interface
type MockLXDProfileUpgradeUnit struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileUpgradeUnitMockRecorder
}

// MockLXDProfileUpgradeUnitMockRecorder is the mock recorder for MockLXDProfileUpgradeUnit
type MockLXDProfileUpgradeUnitMockRecorder struct {
	mock *MockLXDProfileUpgradeUnit
}

// NewMockLXDProfileUpgradeUnit creates a new mock instance
func NewMockLXDProfileUpgradeUnit(ctrl *gomock.Controller) *MockLXDProfileUpgradeUnit {
	mock := &MockLXDProfileUpgradeUnit{ctrl: ctrl}
	mock.recorder = &MockLXDProfileUpgradeUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileUpgradeUnit) EXPECT() *MockLXDProfileUpgradeUnitMockRecorder {
	return m.recorder
}

// AssignedMachineId mocks base method
func (m *MockLXDProfileUpgradeUnit) AssignedMachineId() (string, error) {
	ret := m.ctrl.Call(m, "AssignedMachineId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignedMachineId indicates an expected call of AssignedMachineId
func (mr *MockLXDProfileUpgradeUnitMockRecorder) AssignedMachineId() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedMachineId", reflect.TypeOf((*MockLXDProfileUpgradeUnit)(nil).AssignedMachineId))
}

// LXDProfileUpgradeStatus mocks base method
func (m *MockLXDProfileUpgradeUnit) LXDProfileUpgradeStatus() (model.LXDProfileUpgradeStatus, error) {
	ret := m.ctrl.Call(m, "LXDProfileUpgradeStatus")
	ret0, _ := ret[0].(model.LXDProfileUpgradeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileUpgradeStatus indicates an expected call of LXDProfileUpgradeStatus
func (mr *MockLXDProfileUpgradeUnitMockRecorder) LXDProfileUpgradeStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileUpgradeStatus", reflect.TypeOf((*MockLXDProfileUpgradeUnit)(nil).LXDProfileUpgradeStatus))
}

// Tag mocks base method
func (m *MockLXDProfileUpgradeUnit) Tag() names_v2.Tag {
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names_v2.Tag)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockLXDProfileUpgradeUnitMockRecorder) Tag() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockLXDProfileUpgradeUnit)(nil).Tag))
}
