// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/model (interfaces: BranchCommandAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBranchCommandAPI is a mock of BranchCommandAPI interface
type MockBranchCommandAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBranchCommandAPIMockRecorder
}

// MockBranchCommandAPIMockRecorder is the mock recorder for MockBranchCommandAPI
type MockBranchCommandAPIMockRecorder struct {
	mock *MockBranchCommandAPI
}

// NewMockBranchCommandAPI creates a new mock instance
func NewMockBranchCommandAPI(ctrl *gomock.Controller) *MockBranchCommandAPI {
	mock := &MockBranchCommandAPI{ctrl: ctrl}
	mock.recorder = &MockBranchCommandAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBranchCommandAPI) EXPECT() *MockBranchCommandAPIMockRecorder {
	return m.recorder
}

// AddBranch mocks base method
func (m *MockBranchCommandAPI) AddBranch(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "AddBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBranch indicates an expected call of AddBranch
func (mr *MockBranchCommandAPIMockRecorder) AddBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBranch", reflect.TypeOf((*MockBranchCommandAPI)(nil).AddBranch), arg0, arg1)
}

// Close mocks base method
func (m *MockBranchCommandAPI) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockBranchCommandAPIMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBranchCommandAPI)(nil).Close))
}
