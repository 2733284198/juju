// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/deployer (interfaces: BundleResolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v8"
	params "github.com/juju/charmrepo/v6/csclient/params"
	reflect "reflect"
)

// MockBundleResolver is a mock of BundleResolver interface
type MockBundleResolver struct {
	ctrl     *gomock.Controller
	recorder *MockBundleResolverMockRecorder
}

// MockBundleResolverMockRecorder is the mock recorder for MockBundleResolver
type MockBundleResolverMockRecorder struct {
	mock *MockBundleResolver
}

// NewMockBundleResolver creates a new mock instance
func NewMockBundleResolver(ctrl *gomock.Controller) *MockBundleResolver {
	mock := &MockBundleResolver{ctrl: ctrl}
	mock.recorder = &MockBundleResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundleResolver) EXPECT() *MockBundleResolverMockRecorder {
	return m.recorder
}

// GetBundle mocks base method
func (m *MockBundleResolver) GetBundle(arg0 *charm.URL, arg1 string) (charm.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundle", arg0, arg1)
	ret0, _ := ret[0].(charm.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundle indicates an expected call of GetBundle
func (mr *MockBundleResolverMockRecorder) GetBundle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockBundleResolver)(nil).GetBundle), arg0, arg1)
}

// ResolveWithPreferredChannel mocks base method
func (m *MockBundleResolver) ResolveWithPreferredChannel(arg0 *charm.URL, arg1 params.Channel) (*charm.URL, params.Channel, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveWithPreferredChannel", arg0, arg1)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(params.Channel)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ResolveWithPreferredChannel indicates an expected call of ResolveWithPreferredChannel
func (mr *MockBundleResolverMockRecorder) ResolveWithPreferredChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveWithPreferredChannel", reflect.TypeOf((*MockBundleResolver)(nil).ResolveWithPreferredChannel), arg0, arg1)
}
