// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: EnvironProvider,ProviderCredentials,ProviderCredentialsRegister,RequestFinalizeCredential)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	jsonschema "github.com/juju/jsonschema"
	cloud "github.com/juju/juju/cloud"
	environs "github.com/juju/juju/environs"
	config "github.com/juju/juju/environs/config"
	context "github.com/juju/juju/environs/context"
	reflect "reflect"
)

// MockEnvironProvider is a mock of EnvironProvider interface
type MockEnvironProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironProviderMockRecorder
}

// MockEnvironProviderMockRecorder is the mock recorder for MockEnvironProvider
type MockEnvironProviderMockRecorder struct {
	mock *MockEnvironProvider
}

// NewMockEnvironProvider creates a new mock instance
func NewMockEnvironProvider(ctrl *gomock.Controller) *MockEnvironProvider {
	mock := &MockEnvironProvider{ctrl: ctrl}
	mock.recorder = &MockEnvironProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvironProvider) EXPECT() *MockEnvironProviderMockRecorder {
	return m.recorder
}

// CloudSchema mocks base method
func (m *MockEnvironProvider) CloudSchema() *jsonschema.Schema {
	ret := m.ctrl.Call(m, "CloudSchema")
	ret0, _ := ret[0].(*jsonschema.Schema)
	return ret0
}

// CloudSchema indicates an expected call of CloudSchema
func (mr *MockEnvironProviderMockRecorder) CloudSchema() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSchema", reflect.TypeOf((*MockEnvironProvider)(nil).CloudSchema))
}

// CredentialSchemas mocks base method
func (m *MockEnvironProvider) CredentialSchemas() map[cloud.AuthType]cloud.CredentialSchema {
	ret := m.ctrl.Call(m, "CredentialSchemas")
	ret0, _ := ret[0].(map[cloud.AuthType]cloud.CredentialSchema)
	return ret0
}

// CredentialSchemas indicates an expected call of CredentialSchemas
func (mr *MockEnvironProviderMockRecorder) CredentialSchemas() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialSchemas", reflect.TypeOf((*MockEnvironProvider)(nil).CredentialSchemas))
}

// DetectCredentials mocks base method
func (m *MockEnvironProvider) DetectCredentials() (*cloud.CloudCredential, error) {
	ret := m.ctrl.Call(m, "DetectCredentials")
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCredentials indicates an expected call of DetectCredentials
func (mr *MockEnvironProviderMockRecorder) DetectCredentials() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCredentials", reflect.TypeOf((*MockEnvironProvider)(nil).DetectCredentials))
}

// FinalizeCredential mocks base method
func (m *MockEnvironProvider) FinalizeCredential(arg0 environs.FinalizeCredentialContext, arg1 environs.FinalizeCredentialParams) (*cloud.Credential, error) {
	ret := m.ctrl.Call(m, "FinalizeCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCredential indicates an expected call of FinalizeCredential
func (mr *MockEnvironProviderMockRecorder) FinalizeCredential(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCredential", reflect.TypeOf((*MockEnvironProvider)(nil).FinalizeCredential), arg0, arg1)
}

// Ping mocks base method
func (m *MockEnvironProvider) Ping(arg0 context.ProviderCallContext, arg1 string) error {
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockEnvironProviderMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockEnvironProvider)(nil).Ping), arg0, arg1)
}

// PrepareConfig mocks base method
func (m *MockEnvironProvider) PrepareConfig(arg0 environs.PrepareConfigParams) (*config.Config, error) {
	ret := m.ctrl.Call(m, "PrepareConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareConfig indicates an expected call of PrepareConfig
func (mr *MockEnvironProviderMockRecorder) PrepareConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareConfig", reflect.TypeOf((*MockEnvironProvider)(nil).PrepareConfig), arg0)
}

// Validate mocks base method
func (m *MockEnvironProvider) Validate(arg0, arg1 *config.Config) (*config.Config, error) {
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockEnvironProviderMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockEnvironProvider)(nil).Validate), arg0, arg1)
}

// Version mocks base method
func (m *MockEnvironProvider) Version() int {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockEnvironProviderMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEnvironProvider)(nil).Version))
}

// MockProviderCredentials is a mock of ProviderCredentials interface
type MockProviderCredentials struct {
	ctrl     *gomock.Controller
	recorder *MockProviderCredentialsMockRecorder
}

// MockProviderCredentialsMockRecorder is the mock recorder for MockProviderCredentials
type MockProviderCredentialsMockRecorder struct {
	mock *MockProviderCredentials
}

// NewMockProviderCredentials creates a new mock instance
func NewMockProviderCredentials(ctrl *gomock.Controller) *MockProviderCredentials {
	mock := &MockProviderCredentials{ctrl: ctrl}
	mock.recorder = &MockProviderCredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderCredentials) EXPECT() *MockProviderCredentialsMockRecorder {
	return m.recorder
}

// CredentialSchemas mocks base method
func (m *MockProviderCredentials) CredentialSchemas() map[cloud.AuthType]cloud.CredentialSchema {
	ret := m.ctrl.Call(m, "CredentialSchemas")
	ret0, _ := ret[0].(map[cloud.AuthType]cloud.CredentialSchema)
	return ret0
}

// CredentialSchemas indicates an expected call of CredentialSchemas
func (mr *MockProviderCredentialsMockRecorder) CredentialSchemas() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialSchemas", reflect.TypeOf((*MockProviderCredentials)(nil).CredentialSchemas))
}

// DetectCredentials mocks base method
func (m *MockProviderCredentials) DetectCredentials() (*cloud.CloudCredential, error) {
	ret := m.ctrl.Call(m, "DetectCredentials")
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCredentials indicates an expected call of DetectCredentials
func (mr *MockProviderCredentialsMockRecorder) DetectCredentials() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCredentials", reflect.TypeOf((*MockProviderCredentials)(nil).DetectCredentials))
}

// FinalizeCredential mocks base method
func (m *MockProviderCredentials) FinalizeCredential(arg0 environs.FinalizeCredentialContext, arg1 environs.FinalizeCredentialParams) (*cloud.Credential, error) {
	ret := m.ctrl.Call(m, "FinalizeCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCredential indicates an expected call of FinalizeCredential
func (mr *MockProviderCredentialsMockRecorder) FinalizeCredential(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCredential", reflect.TypeOf((*MockProviderCredentials)(nil).FinalizeCredential), arg0, arg1)
}

// MockProviderCredentialsRegister is a mock of ProviderCredentialsRegister interface
type MockProviderCredentialsRegister struct {
	ctrl     *gomock.Controller
	recorder *MockProviderCredentialsRegisterMockRecorder
}

// MockProviderCredentialsRegisterMockRecorder is the mock recorder for MockProviderCredentialsRegister
type MockProviderCredentialsRegisterMockRecorder struct {
	mock *MockProviderCredentialsRegister
}

// NewMockProviderCredentialsRegister creates a new mock instance
func NewMockProviderCredentialsRegister(ctrl *gomock.Controller) *MockProviderCredentialsRegister {
	mock := &MockProviderCredentialsRegister{ctrl: ctrl}
	mock.recorder = &MockProviderCredentialsRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderCredentialsRegister) EXPECT() *MockProviderCredentialsRegisterMockRecorder {
	return m.recorder
}

// RegisterCredentials mocks base method
func (m *MockProviderCredentialsRegister) RegisterCredentials() (map[string]*cloud.CloudCredential, error) {
	ret := m.ctrl.Call(m, "RegisterCredentials")
	ret0, _ := ret[0].(map[string]*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCredentials indicates an expected call of RegisterCredentials
func (mr *MockProviderCredentialsRegisterMockRecorder) RegisterCredentials() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCredentials", reflect.TypeOf((*MockProviderCredentialsRegister)(nil).RegisterCredentials))
}

// MockRequestFinalizeCredential is a mock of RequestFinalizeCredential interface
type MockRequestFinalizeCredential struct {
	ctrl     *gomock.Controller
	recorder *MockRequestFinalizeCredentialMockRecorder
}

// MockRequestFinalizeCredentialMockRecorder is the mock recorder for MockRequestFinalizeCredential
type MockRequestFinalizeCredentialMockRecorder struct {
	mock *MockRequestFinalizeCredential
}

// NewMockRequestFinalizeCredential creates a new mock instance
func NewMockRequestFinalizeCredential(ctrl *gomock.Controller) *MockRequestFinalizeCredential {
	mock := &MockRequestFinalizeCredential{ctrl: ctrl}
	mock.recorder = &MockRequestFinalizeCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestFinalizeCredential) EXPECT() *MockRequestFinalizeCredentialMockRecorder {
	return m.recorder
}

// ShouldFinalizeCredential mocks base method
func (m *MockRequestFinalizeCredential) ShouldFinalizeCredential(arg0 cloud.Credential) bool {
	ret := m.ctrl.Call(m, "ShouldFinalizeCredential", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldFinalizeCredential indicates an expected call of ShouldFinalizeCredential
func (mr *MockRequestFinalizeCredentialMockRecorder) ShouldFinalizeCredential(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldFinalizeCredential", reflect.TypeOf((*MockRequestFinalizeCredential)(nil).ShouldFinalizeCredential), arg0)
}
