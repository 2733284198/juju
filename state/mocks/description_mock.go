// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description (interfaces: Machine,OpenedPorts,PortRange)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	description "github.com/juju/description"
	names_v2 "gopkg.in/juju/names.v3"
	reflect "reflect"
)

// MockMachine is a mock of Machine interface
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// AddBlockDevice mocks base method
func (m *MockMachine) AddBlockDevice(arg0 description.BlockDeviceArgs) description.BlockDevice {
	ret := m.ctrl.Call(m, "AddBlockDevice", arg0)
	ret0, _ := ret[0].(description.BlockDevice)
	return ret0
}

// AddBlockDevice indicates an expected call of AddBlockDevice
func (mr *MockMachineMockRecorder) AddBlockDevice(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockDevice", reflect.TypeOf((*MockMachine)(nil).AddBlockDevice), arg0)
}

// AddContainer mocks base method
func (m *MockMachine) AddContainer(arg0 description.MachineArgs) description.Machine {
	ret := m.ctrl.Call(m, "AddContainer", arg0)
	ret0, _ := ret[0].(description.Machine)
	return ret0
}

// AddContainer indicates an expected call of AddContainer
func (mr *MockMachineMockRecorder) AddContainer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainer", reflect.TypeOf((*MockMachine)(nil).AddContainer), arg0)
}

// AddOpenedPorts mocks base method
func (m *MockMachine) AddOpenedPorts(arg0 description.OpenedPortsArgs) description.OpenedPorts {
	ret := m.ctrl.Call(m, "AddOpenedPorts", arg0)
	ret0, _ := ret[0].(description.OpenedPorts)
	return ret0
}

// AddOpenedPorts indicates an expected call of AddOpenedPorts
func (mr *MockMachineMockRecorder) AddOpenedPorts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenedPorts", reflect.TypeOf((*MockMachine)(nil).AddOpenedPorts), arg0)
}

// Annotations mocks base method
func (m *MockMachine) Annotations() map[string]string {
	ret := m.ctrl.Call(m, "Annotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Annotations indicates an expected call of Annotations
func (mr *MockMachineMockRecorder) Annotations() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockMachine)(nil).Annotations))
}

// BlockDevices mocks base method
func (m *MockMachine) BlockDevices() []description.BlockDevice {
	ret := m.ctrl.Call(m, "BlockDevices")
	ret0, _ := ret[0].([]description.BlockDevice)
	return ret0
}

// BlockDevices indicates an expected call of BlockDevices
func (mr *MockMachineMockRecorder) BlockDevices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevices", reflect.TypeOf((*MockMachine)(nil).BlockDevices))
}

// Constraints mocks base method
func (m *MockMachine) Constraints() description.Constraints {
	ret := m.ctrl.Call(m, "Constraints")
	ret0, _ := ret[0].(description.Constraints)
	return ret0
}

// Constraints indicates an expected call of Constraints
func (mr *MockMachineMockRecorder) Constraints() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constraints", reflect.TypeOf((*MockMachine)(nil).Constraints))
}

// ContainerType mocks base method
func (m *MockMachine) ContainerType() string {
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContainerType indicates an expected call of ContainerType
func (mr *MockMachineMockRecorder) ContainerType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockMachine)(nil).ContainerType))
}

// Containers mocks base method
func (m *MockMachine) Containers() []description.Machine {
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].([]description.Machine)
	return ret0
}

// Containers indicates an expected call of Containers
func (mr *MockMachineMockRecorder) Containers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockMachine)(nil).Containers))
}

// Id mocks base method
func (m *MockMachine) Id() string {
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockMachineMockRecorder) Id() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMachine)(nil).Id))
}

// Instance mocks base method
func (m *MockMachine) Instance() description.CloudInstance {
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(description.CloudInstance)
	return ret0
}

// Instance indicates an expected call of Instance
func (mr *MockMachineMockRecorder) Instance() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockMachine)(nil).Instance))
}

// Jobs mocks base method
func (m *MockMachine) Jobs() []string {
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Jobs indicates an expected call of Jobs
func (mr *MockMachineMockRecorder) Jobs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockMachine)(nil).Jobs))
}

// MachineAddresses mocks base method
func (m *MockMachine) MachineAddresses() []description.Address {
	ret := m.ctrl.Call(m, "MachineAddresses")
	ret0, _ := ret[0].([]description.Address)
	return ret0
}

// MachineAddresses indicates an expected call of MachineAddresses
func (mr *MockMachineMockRecorder) MachineAddresses() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineAddresses", reflect.TypeOf((*MockMachine)(nil).MachineAddresses))
}

// Nonce mocks base method
func (m *MockMachine) Nonce() string {
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(string)
	return ret0
}

// Nonce indicates an expected call of Nonce
func (mr *MockMachineMockRecorder) Nonce() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockMachine)(nil).Nonce))
}

// OpenedPorts mocks base method
func (m *MockMachine) OpenedPorts() []description.OpenedPorts {
	ret := m.ctrl.Call(m, "OpenedPorts")
	ret0, _ := ret[0].([]description.OpenedPorts)
	return ret0
}

// OpenedPorts indicates an expected call of OpenedPorts
func (mr *MockMachineMockRecorder) OpenedPorts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenedPorts", reflect.TypeOf((*MockMachine)(nil).OpenedPorts))
}

// PasswordHash mocks base method
func (m *MockMachine) PasswordHash() string {
	ret := m.ctrl.Call(m, "PasswordHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// PasswordHash indicates an expected call of PasswordHash
func (mr *MockMachineMockRecorder) PasswordHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHash", reflect.TypeOf((*MockMachine)(nil).PasswordHash))
}

// Placement mocks base method
func (m *MockMachine) Placement() string {
	ret := m.ctrl.Call(m, "Placement")
	ret0, _ := ret[0].(string)
	return ret0
}

// Placement indicates an expected call of Placement
func (mr *MockMachineMockRecorder) Placement() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placement", reflect.TypeOf((*MockMachine)(nil).Placement))
}

// PreferredPrivateAddress mocks base method
func (m *MockMachine) PreferredPrivateAddress() description.Address {
	ret := m.ctrl.Call(m, "PreferredPrivateAddress")
	ret0, _ := ret[0].(description.Address)
	return ret0
}

// PreferredPrivateAddress indicates an expected call of PreferredPrivateAddress
func (mr *MockMachineMockRecorder) PreferredPrivateAddress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreferredPrivateAddress", reflect.TypeOf((*MockMachine)(nil).PreferredPrivateAddress))
}

// PreferredPublicAddress mocks base method
func (m *MockMachine) PreferredPublicAddress() description.Address {
	ret := m.ctrl.Call(m, "PreferredPublicAddress")
	ret0, _ := ret[0].(description.Address)
	return ret0
}

// PreferredPublicAddress indicates an expected call of PreferredPublicAddress
func (mr *MockMachineMockRecorder) PreferredPublicAddress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreferredPublicAddress", reflect.TypeOf((*MockMachine)(nil).PreferredPublicAddress))
}

// ProviderAddresses mocks base method
func (m *MockMachine) ProviderAddresses() []description.Address {
	ret := m.ctrl.Call(m, "ProviderAddresses")
	ret0, _ := ret[0].([]description.Address)
	return ret0
}

// ProviderAddresses indicates an expected call of ProviderAddresses
func (mr *MockMachineMockRecorder) ProviderAddresses() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderAddresses", reflect.TypeOf((*MockMachine)(nil).ProviderAddresses))
}

// Series mocks base method
func (m *MockMachine) Series() string {
	ret := m.ctrl.Call(m, "Series")
	ret0, _ := ret[0].(string)
	return ret0
}

// Series indicates an expected call of Series
func (mr *MockMachineMockRecorder) Series() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Series", reflect.TypeOf((*MockMachine)(nil).Series))
}

// SetAddresses mocks base method
func (m *MockMachine) SetAddresses(arg0, arg1 []description.AddressArgs) {
	m.ctrl.Call(m, "SetAddresses", arg0, arg1)
}

// SetAddresses indicates an expected call of SetAddresses
func (mr *MockMachineMockRecorder) SetAddresses(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddresses", reflect.TypeOf((*MockMachine)(nil).SetAddresses), arg0, arg1)
}

// SetAnnotations mocks base method
func (m *MockMachine) SetAnnotations(arg0 map[string]string) {
	m.ctrl.Call(m, "SetAnnotations", arg0)
}

// SetAnnotations indicates an expected call of SetAnnotations
func (mr *MockMachineMockRecorder) SetAnnotations(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockMachine)(nil).SetAnnotations), arg0)
}

// SetConstraints mocks base method
func (m *MockMachine) SetConstraints(arg0 description.ConstraintsArgs) {
	m.ctrl.Call(m, "SetConstraints", arg0)
}

// SetConstraints indicates an expected call of SetConstraints
func (mr *MockMachineMockRecorder) SetConstraints(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockMachine)(nil).SetConstraints), arg0)
}

// SetInstance mocks base method
func (m *MockMachine) SetInstance(arg0 description.CloudInstanceArgs) {
	m.ctrl.Call(m, "SetInstance", arg0)
}

// SetInstance indicates an expected call of SetInstance
func (mr *MockMachineMockRecorder) SetInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstance", reflect.TypeOf((*MockMachine)(nil).SetInstance), arg0)
}

// SetPreferredAddresses mocks base method
func (m *MockMachine) SetPreferredAddresses(arg0, arg1 description.AddressArgs) {
	m.ctrl.Call(m, "SetPreferredAddresses", arg0, arg1)
}

// SetPreferredAddresses indicates an expected call of SetPreferredAddresses
func (mr *MockMachineMockRecorder) SetPreferredAddresses(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreferredAddresses", reflect.TypeOf((*MockMachine)(nil).SetPreferredAddresses), arg0, arg1)
}

// SetStatus mocks base method
func (m *MockMachine) SetStatus(arg0 description.StatusArgs) {
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockMachineMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockMachine)(nil).SetStatus), arg0)
}

// SetStatusHistory mocks base method
func (m *MockMachine) SetStatusHistory(arg0 []description.StatusArgs) {
	m.ctrl.Call(m, "SetStatusHistory", arg0)
}

// SetStatusHistory indicates an expected call of SetStatusHistory
func (mr *MockMachineMockRecorder) SetStatusHistory(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusHistory", reflect.TypeOf((*MockMachine)(nil).SetStatusHistory), arg0)
}

// SetTools mocks base method
func (m *MockMachine) SetTools(arg0 description.AgentToolsArgs) {
	m.ctrl.Call(m, "SetTools", arg0)
}

// SetTools indicates an expected call of SetTools
func (mr *MockMachineMockRecorder) SetTools(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTools", reflect.TypeOf((*MockMachine)(nil).SetTools), arg0)
}

// Status mocks base method
func (m *MockMachine) Status() description.Status {
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockMachineMockRecorder) Status() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMachine)(nil).Status))
}

// StatusHistory mocks base method
func (m *MockMachine) StatusHistory() []description.Status {
	ret := m.ctrl.Call(m, "StatusHistory")
	ret0, _ := ret[0].([]description.Status)
	return ret0
}

// StatusHistory indicates an expected call of StatusHistory
func (mr *MockMachineMockRecorder) StatusHistory() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusHistory", reflect.TypeOf((*MockMachine)(nil).StatusHistory))
}

// SupportedContainers mocks base method
func (m *MockMachine) SupportedContainers() ([]string, bool) {
	ret := m.ctrl.Call(m, "SupportedContainers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SupportedContainers indicates an expected call of SupportedContainers
func (mr *MockMachineMockRecorder) SupportedContainers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedContainers", reflect.TypeOf((*MockMachine)(nil).SupportedContainers))
}

// Tag mocks base method
func (m *MockMachine) Tag() names_v2.MachineTag {
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names_v2.MachineTag)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockMachineMockRecorder) Tag() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockMachine)(nil).Tag))
}

// Tools mocks base method
func (m *MockMachine) Tools() description.AgentTools {
	ret := m.ctrl.Call(m, "Tools")
	ret0, _ := ret[0].(description.AgentTools)
	return ret0
}

// Tools indicates an expected call of Tools
func (mr *MockMachineMockRecorder) Tools() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tools", reflect.TypeOf((*MockMachine)(nil).Tools))
}

// Validate mocks base method
func (m *MockMachine) Validate() error {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockMachineMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMachine)(nil).Validate))
}

// MockOpenedPorts is a mock of OpenedPorts interface
type MockOpenedPorts struct {
	ctrl     *gomock.Controller
	recorder *MockOpenedPortsMockRecorder
}

// MockOpenedPortsMockRecorder is the mock recorder for MockOpenedPorts
type MockOpenedPortsMockRecorder struct {
	mock *MockOpenedPorts
}

// NewMockOpenedPorts creates a new mock instance
func NewMockOpenedPorts(ctrl *gomock.Controller) *MockOpenedPorts {
	mock := &MockOpenedPorts{ctrl: ctrl}
	mock.recorder = &MockOpenedPortsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenedPorts) EXPECT() *MockOpenedPortsMockRecorder {
	return m.recorder
}

// OpenPorts mocks base method
func (m *MockOpenedPorts) OpenPorts() []description.PortRange {
	ret := m.ctrl.Call(m, "OpenPorts")
	ret0, _ := ret[0].([]description.PortRange)
	return ret0
}

// OpenPorts indicates an expected call of OpenPorts
func (mr *MockOpenedPortsMockRecorder) OpenPorts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPorts", reflect.TypeOf((*MockOpenedPorts)(nil).OpenPorts))
}

// SubnetID mocks base method
func (m *MockOpenedPorts) SubnetID() string {
	ret := m.ctrl.Call(m, "SubnetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetID indicates an expected call of SubnetID
func (mr *MockOpenedPortsMockRecorder) SubnetID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetID", reflect.TypeOf((*MockOpenedPorts)(nil).SubnetID))
}

// MockPortRange is a mock of PortRange interface
type MockPortRange struct {
	ctrl     *gomock.Controller
	recorder *MockPortRangeMockRecorder
}

// MockPortRangeMockRecorder is the mock recorder for MockPortRange
type MockPortRangeMockRecorder struct {
	mock *MockPortRange
}

// NewMockPortRange creates a new mock instance
func NewMockPortRange(ctrl *gomock.Controller) *MockPortRange {
	mock := &MockPortRange{ctrl: ctrl}
	mock.recorder = &MockPortRangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortRange) EXPECT() *MockPortRangeMockRecorder {
	return m.recorder
}

// FromPort mocks base method
func (m *MockPortRange) FromPort() int {
	ret := m.ctrl.Call(m, "FromPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// FromPort indicates an expected call of FromPort
func (mr *MockPortRangeMockRecorder) FromPort() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromPort", reflect.TypeOf((*MockPortRange)(nil).FromPort))
}

// Protocol mocks base method
func (m *MockPortRange) Protocol() string {
	ret := m.ctrl.Call(m, "Protocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// Protocol indicates an expected call of Protocol
func (mr *MockPortRangeMockRecorder) Protocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocol", reflect.TypeOf((*MockPortRange)(nil).Protocol))
}

// ToPort mocks base method
func (m *MockPortRange) ToPort() int {
	ret := m.ctrl.Call(m, "ToPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ToPort indicates an expected call of ToPort
func (mr *MockPortRangeMockRecorder) ToPort() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToPort", reflect.TypeOf((*MockPortRange)(nil).ToPort))
}

// UnitName mocks base method
func (m *MockPortRange) UnitName() string {
	ret := m.ctrl.Call(m, "UnitName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UnitName indicates an expected call of UnitName
func (mr *MockPortRangeMockRecorder) UnitName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitName", reflect.TypeOf((*MockPortRange)(nil).UnitName))
}
