// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/provider/lxd (interfaces: LXDCertificateReadWriter,LXDCertificateGenerator,LXDNetLookup)

// Package lxd is a generated GoMock package.
package lxd

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockLXDCertificateReadWriter is a mock of LXDCertificateReadWriter interface
type MockLXDCertificateReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockLXDCertificateReadWriterMockRecorder
}

// MockLXDCertificateReadWriterMockRecorder is the mock recorder for MockLXDCertificateReadWriter
type MockLXDCertificateReadWriterMockRecorder struct {
	mock *MockLXDCertificateReadWriter
}

// NewMockLXDCertificateReadWriter creates a new mock instance
func NewMockLXDCertificateReadWriter(ctrl *gomock.Controller) *MockLXDCertificateReadWriter {
	mock := &MockLXDCertificateReadWriter{ctrl: ctrl}
	mock.recorder = &MockLXDCertificateReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDCertificateReadWriter) EXPECT() *MockLXDCertificateReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockLXDCertificateReadWriter) Read(arg0 string) ([]byte, []byte, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read
func (mr *MockLXDCertificateReadWriterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLXDCertificateReadWriter)(nil).Read), arg0)
}

// Write mocks base method
func (m *MockLXDCertificateReadWriter) Write(arg0 string, arg1, arg2 []byte) error {
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockLXDCertificateReadWriterMockRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLXDCertificateReadWriter)(nil).Write), arg0, arg1, arg2)
}

// MockLXDCertificateGenerator is a mock of LXDCertificateGenerator interface
type MockLXDCertificateGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockLXDCertificateGeneratorMockRecorder
}

// MockLXDCertificateGeneratorMockRecorder is the mock recorder for MockLXDCertificateGenerator
type MockLXDCertificateGeneratorMockRecorder struct {
	mock *MockLXDCertificateGenerator
}

// NewMockLXDCertificateGenerator creates a new mock instance
func NewMockLXDCertificateGenerator(ctrl *gomock.Controller) *MockLXDCertificateGenerator {
	mock := &MockLXDCertificateGenerator{ctrl: ctrl}
	mock.recorder = &MockLXDCertificateGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDCertificateGenerator) EXPECT() *MockLXDCertificateGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockLXDCertificateGenerator) Generate(arg0 bool) ([]byte, []byte, error) {
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate indicates an expected call of Generate
func (mr *MockLXDCertificateGeneratorMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockLXDCertificateGenerator)(nil).Generate), arg0)
}

// MockLXDNetLookup is a mock of LXDNetLookup interface
type MockLXDNetLookup struct {
	ctrl     *gomock.Controller
	recorder *MockLXDNetLookupMockRecorder
}

// MockLXDNetLookupMockRecorder is the mock recorder for MockLXDNetLookup
type MockLXDNetLookupMockRecorder struct {
	mock *MockLXDNetLookup
}

// NewMockLXDNetLookup creates a new mock instance
func NewMockLXDNetLookup(ctrl *gomock.Controller) *MockLXDNetLookup {
	mock := &MockLXDNetLookup{ctrl: ctrl}
	mock.recorder = &MockLXDNetLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDNetLookup) EXPECT() *MockLXDNetLookupMockRecorder {
	return m.recorder
}

// InterfaceAddrs mocks base method
func (m *MockLXDNetLookup) InterfaceAddrs() ([]net.Addr, error) {
	ret := m.ctrl.Call(m, "InterfaceAddrs")
	ret0, _ := ret[0].([]net.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceAddrs indicates an expected call of InterfaceAddrs
func (mr *MockLXDNetLookupMockRecorder) InterfaceAddrs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceAddrs", reflect.TypeOf((*MockLXDNetLookup)(nil).InterfaceAddrs))
}

// LookupHost mocks base method
func (m *MockLXDNetLookup) LookupHost(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "LookupHost", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHost indicates an expected call of LookupHost
func (mr *MockLXDNetLookupMockRecorder) LookupHost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockLXDNetLookup)(nil).LookupHost), arg0)
}
