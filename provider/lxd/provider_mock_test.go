// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/provider/lxd (interfaces: ProviderLXDServer,LXDInterfaceAddress)

// Package lxd is a generated GoMock package.
package lxd

import (
	gomock "github.com/golang/mock/gomock"
	lxd "github.com/juju/juju/container/lxd"
	client "github.com/lxc/lxd/client"
	api "github.com/lxc/lxd/shared/api"
	reflect "reflect"
)

// MockProviderLXDServer is a mock of ProviderLXDServer interface
type MockProviderLXDServer struct {
	ctrl     *gomock.Controller
	recorder *MockProviderLXDServerMockRecorder
}

// MockProviderLXDServerMockRecorder is the mock recorder for MockProviderLXDServer
type MockProviderLXDServerMockRecorder struct {
	mock *MockProviderLXDServer
}

// NewMockProviderLXDServer creates a new mock instance
func NewMockProviderLXDServer(ctrl *gomock.Controller) *MockProviderLXDServer {
	mock := &MockProviderLXDServer{ctrl: ctrl}
	mock.recorder = &MockProviderLXDServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderLXDServer) EXPECT() *MockProviderLXDServerMockRecorder {
	return m.recorder
}

// CreateClientCertificate mocks base method
func (m *MockProviderLXDServer) CreateClientCertificate(arg0 *lxd.Certificate) error {
	ret := m.ctrl.Call(m, "CreateClientCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientCertificate indicates an expected call of CreateClientCertificate
func (mr *MockProviderLXDServerMockRecorder) CreateClientCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientCertificate", reflect.TypeOf((*MockProviderLXDServer)(nil).CreateClientCertificate), arg0)
}

// GetCertificate mocks base method
func (m *MockProviderLXDServer) GetCertificate(arg0 string) (*api.Certificate, string, error) {
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate
func (mr *MockProviderLXDServerMockRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockProviderLXDServer)(nil).GetCertificate), arg0)
}

// GetConnectionInfo mocks base method
func (m *MockProviderLXDServer) GetConnectionInfo() (*client.ConnectionInfo, error) {
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*client.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo
func (mr *MockProviderLXDServerMockRecorder) GetConnectionInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockProviderLXDServer)(nil).GetConnectionInfo))
}

// LocalBridgeName mocks base method
func (m *MockProviderLXDServer) LocalBridgeName() string {
	ret := m.ctrl.Call(m, "LocalBridgeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalBridgeName indicates an expected call of LocalBridgeName
func (mr *MockProviderLXDServerMockRecorder) LocalBridgeName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalBridgeName", reflect.TypeOf((*MockProviderLXDServer)(nil).LocalBridgeName))
}

// ServerCertificate mocks base method
func (m *MockProviderLXDServer) ServerCertificate() string {
	ret := m.ctrl.Call(m, "ServerCertificate")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerCertificate indicates an expected call of ServerCertificate
func (mr *MockProviderLXDServerMockRecorder) ServerCertificate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerCertificate", reflect.TypeOf((*MockProviderLXDServer)(nil).ServerCertificate))
}

// MockLXDInterfaceAddress is a mock of LXDInterfaceAddress interface
type MockLXDInterfaceAddress struct {
	ctrl     *gomock.Controller
	recorder *MockLXDInterfaceAddressMockRecorder
}

// MockLXDInterfaceAddressMockRecorder is the mock recorder for MockLXDInterfaceAddress
type MockLXDInterfaceAddressMockRecorder struct {
	mock *MockLXDInterfaceAddress
}

// NewMockLXDInterfaceAddress creates a new mock instance
func NewMockLXDInterfaceAddress(ctrl *gomock.Controller) *MockLXDInterfaceAddress {
	mock := &MockLXDInterfaceAddress{ctrl: ctrl}
	mock.recorder = &MockLXDInterfaceAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDInterfaceAddress) EXPECT() *MockLXDInterfaceAddressMockRecorder {
	return m.recorder
}

// InterfaceAddress mocks base method
func (m *MockLXDInterfaceAddress) InterfaceAddress(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "InterfaceAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceAddress indicates an expected call of InterfaceAddress
func (mr *MockLXDInterfaceAddressMockRecorder) InterfaceAddress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceAddress", reflect.TypeOf((*MockLXDInterfaceAddress)(nil).InterfaceAddress), arg0)
}
