// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/mongo (interfaces: SearchTools)

// Package mongo is a generated GoMock package.
package mongo

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockSearchTools is a mock of SearchTools interface
type MockSearchTools struct {
	ctrl     *gomock.Controller
	recorder *MockSearchToolsMockRecorder
}

// MockSearchToolsMockRecorder is the mock recorder for MockSearchTools
type MockSearchToolsMockRecorder struct {
	mock *MockSearchTools
}

// NewMockSearchTools creates a new mock instance
func NewMockSearchTools(ctrl *gomock.Controller) *MockSearchTools {
	mock := &MockSearchTools{ctrl: ctrl}
	mock.recorder = &MockSearchToolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchTools) EXPECT() *MockSearchToolsMockRecorder {
	return m.recorder
}

// RunCommand mocks base method
func (m *MockSearchTools) RunCommand(arg0 string, arg1 ...string) (string, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommand", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockSearchToolsMockRecorder) RunCommand(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockSearchTools)(nil).RunCommand), varargs...)
}

// Stat mocks base method
func (m *MockSearchTools) Stat(arg0 string) (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockSearchToolsMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockSearchTools)(nil).Stat), arg0)
}
